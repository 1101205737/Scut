<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="EntityTemplate.cs" Inherits="EntityTemplate" Debug="False" Description="生成模板实体" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="数据库连接源信息" %>
<%@ Property Name="ConnectKey" Type="System.String" Category="Context" Description="WebConfig配置的connectionStrings数据库连接的Key" %>
<%@ Property Name="IsPersonal" Type="System.Boolean" Category="Context" Description="是否是个人私有的，默认False：共享类型缓存" %>
<%@ Property Name="PeriodTime" Type="System.String" Category="Context" Description="设置生命周期(秒)，0为时不会过期被移除内存" %>
<%@ Property Name="PersonalName" Type="System.String" Category="Context" Description="映射UserId对应的字段名,默认为\"UserId\"" %>

<%@ Property Name="Namespace" Type="System.String"  Category="Context" Description="实体的命名空间，如ZyGames.Tianjiexing.Model" %>
<%@ Property Name="AccessLevel" Type="System.String"  Category="Context" Description="配置实体是访问级别:ReadOnly,WriteOnly,ReadWrite（注：Config库是ReadOnly，Data库是ReadWrite，Log库是WriteOnly）" %>
<%@ Property Name="OutputDirectory" Type="System.String" Category="Output" Description="生成实体的输出目录" %>
<%@ Register Name="EntityDataTemplate" Template="EntityDataTemplate.cst" MergeProperties="false" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>


<script runat="template">
// My methods here.
public override void Render(System.IO.TextWriter writer)
{

	TableSchemaCollection tables = new TableSchemaCollection(SourceDatabase.Tables);
	tables.Sort(new PropertyComparer("Name"));
	
	for (int i = 0; i < tables.Count; i++)
	{
		// render the table details file.
        TableSchema table = tables[i];
		Trace.WriteLine("Buiding entity name:\"" + this.OutputDirectory +"\\" + SourceDatabase.Name + "\\" + table.Name + ".cs\"");
		writer.WriteLine("Buiding entity name:\"" + this.OutputDirectory + "\\" + SourceDatabase.Name + "\\" + table.Name + ".cs\"");
		EntityDataTemplate entityDataTemplate = this.Create<EntityDataTemplate>();
        CodeSmith.CustomProperties.StringCollection keys = new CodeSmith.CustomProperties.StringCollection();
        for(int j = 0; j < table.Columns.Count; j++){
            ColumnSchema column = table.Columns[j];
            if(column.IsPrimaryKeyMember){
                keys.Add(column.Name);
            }
        }
		entityDataTemplate.SetProperty("TableKeys", keys);
		entityDataTemplate.SetProperty("SourceTable", table);
		entityDataTemplate.SetProperty("ConnectKey", ConnectKey);
		entityDataTemplate.SetProperty("Namespace", Namespace);
		entityDataTemplate.SetProperty("AccessLevel", AccessLevel);
		entityDataTemplate.SetProperty("IsPersonal", IsPersonal);
		entityDataTemplate.SetProperty("PeriodTime", PeriodTime);
		entityDataTemplate.SetProperty("PersonalName", PersonalName);
		entityDataTemplate.RenderToFile(this.OutputDirectory + "\\" + SourceDatabase.Name + "\\" + table.Name + ".cs", true);
		this.Progress.PerformStep();
	}
	
	base.Render(writer);
	this.Progress.PerformStep();
	
}

</script>