<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template entity." %>
<%@ Property Name="ConnectKey" Type="System.String" Category="Context" Description="EntityTable ConnectKey" %>
<%@ Property Name="PeriodTime" Type="System.String" Category="Context" Description="设置生存周期(秒)" %>
<%@ Property Name="IsPersonal" Type="System.Boolean" Category="Context" Description="是否是个人私有的，默认False：共享类型" %>
<%@ Property Name="PersonalName" Type="System.String" Category="Context" Description="映射UserId对应的字段名,默认为\"UserId\"" %>
<%@ Property Name="TableKeys" Type="CodeSmith.CustomProperties.StringCollection"  Category="Custom" Description="Table Keys" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the documentation should be based on." %>
<%@ Property Name="Namespace" Type="System.String"  Category="Context" Description="this is a Namespace" %>
<%@ Property Name="AccessLevel" Type="System.String" Category="Context" Description="AccessLevel" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<script runat="template">
    public string GetColumnDescp(ColumnSchema column)
    {
        return column.ExtendedProperties["CS_Description"].Value.ToString();
    }
    public string GetTableDescp()
    {
        return SourceTable.Description;
    }
    public string GetColumnType(ColumnSchema column)
    {
        string descp = GetColumnDescp(column);
        string columnName;
        if(!string.IsNullOrEmpty(descp) && CheckColType(descp, out columnName))
        {
            if(columnName.ToLower().IndexOf("enum") != -1){
                columnName = columnName.Substring(4).Replace("<","").Replace(">","");
            }
            return columnName;
        }
        if (column.Name.EndsWith("TypeCode")) return column.Name;
 
        switch (column.DataType)
        {
            case DbType.AnsiString: return "string";
            case DbType.AnsiStringFixedLength: return "string";
            case DbType.Binary: return "byte[]";
            case DbType.Boolean: return "bool";
            case DbType.Byte: return "byte";
            case DbType.Currency: return "decimal";
            case DbType.Date: return "DateTime";
            case DbType.DateTime: return "DateTime";
            case DbType.Decimal: return "decimal";
            case DbType.Double: return "double";
            case DbType.Guid: return "Guid";
            case DbType.Int16: return "short";
            case DbType.Int32: return "int";
            case DbType.Int64: return "long";
            case DbType.Object: return "object";
            case DbType.SByte: return "sbyte";
            case DbType.Single: return "float";
            case DbType.String: return "string";
            case DbType.StringFixedLength: return "string";
            case DbType.Time: return "TimeSpan";
            case DbType.UInt16: return "ushort";
            case DbType.UInt32: return "uint";
            case DbType.UInt64: return "ulong";
            case DbType.VarNumeric: return "decimal";
            default:
            {
                return "__UNKNOWN__" + column.NativeType;
            }
        }
    }    
    public string WriteSetIndex(ColumnSchema col)
    {
        string str = "_" + GetPropertyName(col.Name) + " = ";
        //在描述中识别自定义类型:Enum<CountryType> or CacheList<Infor>
        string descp = GetColumnDescp(col);
        string columnName;
        if(!string.IsNullOrEmpty(descp) && CheckColType(descp, out columnName))
        {
            if(columnName.ToLower().IndexOf("enum") != -1){
                string name = columnName.Substring(4);
                return  str += "value.ToEnum" + name + "();";
            }
            return  str += "ConvertCustomField<" + columnName + ">(value, index);";
        }
        
        switch (col.SystemType.Name)
        {
            case "Int16": str += "value.ToShort();"; 
                break;
            case "UniqueIdentifier": str += "(Guid)value;"; 
                break;
            case "Int32": str += "value.ToInt();"; 
                break;
            case "Int64": str += "MathUtils.ToLong(value);"; 
                break;
            case "Decimal": str += "value.ToDecimal();"; 
                break;
            case "Double": str += "value.ToDouble();"; 
                break;
            case "Boolean": str += "value.ToBool();"; 
                break;
            case "Byte": str += "value.ToByte();"; 
                break;
            case "DateTime": str += "value.ToDateTime();"; 
                break;
            case "String": 
                str += "value.ToNotNullString();"; 
                break;
            default: str += "value";
                break;
        }
        return str;
    }
    public bool CheckColType(string str, out string name)
    {
        name = "";
        int from = str.IndexOfAny(new char[]{'[','【'});
        int to = str.IndexOfAny(new char[]{']','】'});
        if(from < to && from > -1 && to < str.Length){
            name = str.Substring(from + 1, to - from - 1);
            return true;
        }
        return false;
    }
    public string GetPropertyName(string colname)
    {
        string first = colname.Substring(0, 1);
        string last = colname.Substring(1, colname.Length-1);
        return first.ToLower() + last;
    }
    public bool CheckClassIsUser()
    {
        string tableDescp =  GetTableDescp();
        return tableDescp.IndexOf("[:BaseUser]")!=-1;    
    }
    public string GetCustomAttribute()
    {
        if (AccessLevel=="ReadWrite" && (IsPersonal)) 
        {
           PersonalName = string.IsNullOrEmpty(PersonalName) ? "\"UserId\"" : PersonalName;
           return "[EntityTable(" + ConnectKey + ", \"" + SourceTable.Name +"\", " + PeriodTime+", " + PersonalName + ")]";
        }
        else if (AccessLevel=="ReadWrite") 
        {
            return "[EntityTable(CacheType.Entity, " + ConnectKey + ", \"" + SourceTable.Name + "\")]";
        }
        else if (AccessLevel=="WriteOnly") 
        {
            return "[EntityTable(AccessLevel.WriteOnly, " + ConnectKey + ", \"" + SourceTable.Name + "\")]";
        }
        else
        {
            return "[EntityTable(AccessLevel.ReadOnly, " + ConnectKey + ", \"" + SourceTable.Name + "\")]";
        } 
        
    }
    public string GetBaseClass()
    {
        string baseClass = "";
        if (CheckClassIsUser()) { 
            baseClass = "BaseUser";
        }
        else if (AccessLevel=="ReadWrite" &&  (IsPersonal)) 
        { 
            baseClass = "BaseEntity";
        }
        else
        {
             baseClass = "ShareEntity";
        }
        return baseClass;
    }
</script>
//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由Codesmith工具生成。
// 此文件的更改可能会导致不正确的行为，如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using ProtoBuf;
using ZyGames.Framework.Common;
using ZyGames.Framework.Collection;
using ZyGames.Framework.Model;
<% if (CheckClassIsUser()) { %>using ZyGames.Framework.Game.Context;<% } %>

namespace <%=Namespace%>
{
    /// <summary>
    /// <%= GetTableDescp() %>
    /// </summary>
    /// <![CDATA[
    /// @periodTime:设置生存周期(秒)
    /// @personalName: 映射UserId对应的字段名,默认为"UserId"
    /// ]]>
    /// </remarks>
    [Serializable, ProtoContract]
    <%= GetCustomAttribute() %>
    public class <%= SourceTable.Name %> :  <%= GetBaseClass() %>
    {
        <% if (AccessLevel=="WriteOnly") { %>
        #region auto-generated static method
        static <%= SourceTable.Name %>()
        {
            EntitySchemaSet.InitSchema(typeof(<%= SourceTable.Name %>));
        }
        #endregion<% } %>
        /// <summary>
        /// </summary>
        public <%= SourceTable.Name %>()
            : base(AccessLevel.<%= AccessLevel%>)
        {
        }        
        /// <summary>
        /// </summary>
        public <%= SourceTable.Name %>(<% for(int i=0; i < TableKeys.Count; i++){%><% if (i > 0){%>, <%}%><%=GetColumnType(SourceTable.Columns[TableKeys[i]])%> <%=GetPropertyName(TableKeys[i])%><%}%>)
            : this()
        {
            <%for(int i=0; i < TableKeys.Count; i++){%>
            _<%=GetPropertyName(TableKeys[i])%> = <%=GetPropertyName(TableKeys[i])%>;
            <%}%>
        }

        #region 自动生成属性
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
        SchemaExplorer.ColumnSchema col = SourceTable.Columns[i];
    %>
        private <%= GetColumnType(col) %> _<%= GetPropertyName(col.Name) %>;
        /// <summary>
        /// <%= GetColumnDescp(col) %>
        /// </summary>        
        [ProtoMember(<%=(i+1)%>)]
		<% if (col.IsPrimaryKeyMember) { %>
        [EntityField("<%= col.Name %>", IsKey = true<% if (col.ExtendedProperties["CS_IsIdentity"].Value.ToString().ToLower() == "true") { %>, IsIdentity = true<% } %><% if (col.SystemType == typeof(System.Guid)) { %>, DbType = ColumnDbType.UniqueIdentifier<% } %>)]
		<% } else { %>
        [EntityField("<%= col.Name %>"<% if (col.SystemType == typeof(System.Guid)) { %>, DbType = ColumnDbType.UniqueIdentifier<% }else if(col.NativeType == "text"){%>, IsJsonSerialize = true, DbType = ColumnDbType.Text<% }%>)]
		<% } %>
        public <%= GetColumnType(col) %> <%= col.Name %>
        {
            <% if (col.IsPrimaryKeyMember || AccessLevel!="WriteOnly") { %>get
            {
                return _<%= GetPropertyName(col.Name) %>;
            } <% } %>
            <% if (AccessLevel!="ReadOnly" && !col.IsPrimaryKeyMember) { %>set
            {
                SetChange("<%= col.Name %>", value);
            }<% } %>
        }
	<% } %>
    
        protected override object this[string index]
		{
			get
			{
                #region
				switch (index)
				{
                <% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
                    SchemaExplorer.ColumnSchema col = SourceTable.Columns[i];
                %>
                    case "<%= col.Name %>": return _<%= GetPropertyName(col.Name) %>;
                <% } %>    
					default: throw new ArgumentException(string.Format("<%= SourceTable.Name %> index[{0}] isn't exist.", index));
				}
                #endregion
			}
			set
			{
                #region
				switch (index)
				{
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
                    SchemaExplorer.ColumnSchema col = SourceTable.Columns[i];
                %>
                    case "<%= col.Name %>": 
                        <%=WriteSetIndex(col)%>
                        break; 
                <% } %>
					default: throw new ArgumentException(string.Format("<%= SourceTable.Name %> index[{0}] isn't exist.", index));
				}
                #endregion
			}
		}
        
        #endregion
        <% if (AccessLevel=="ReadWrite" && IsPersonal) { %>
        
        protected override int GetIdentityId()
        {
            //设置玩家的UserID
            //若要做为全局使用设置类绑定的自定义属性[EntityTable(CacheType.Entity, DbConfig.Config, @TableName, @PeriodTime)]
            return UserId;
        }<% } %>        
        <% if (CheckClassIsUser()) { %>
        
        public override string GetSessionId()
        {
            return SessionID;
        }

        public override int GetUserId()
        {
            return UserId;
        }

        public override string GetNickName()
        {
            return NickName;
        }

        public override string GetPassportId()
        {
            return Pid;
        }

        public override string GetRetailId()
        {
            return RetailId;
        }

        public override bool IsFengJinStatus
        {
            get { return UserStatus == UserStatus.FengJin; }
        }

        /// <summary>
        /// 玩家会话ID
        /// </summary>
        [ProtoMember(100)]
        public string SessionID { get; set; }

        /// <summary>
        /// 玩家请求时间,排除常刷新接口
        /// </summary>
        [ProtoMember(101)]
        public override DateTime OnlineDate { get; set; }<% } %>
	}
}